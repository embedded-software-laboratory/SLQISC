 
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module SUBLEQ(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS
);

//=======================================================
//  REG/WIRE declarations
//=======================================================
reg   [127:0]   data;
reg     [4:0]   state           = 0;
reg     [4:0]   next_state      = 0;

wire   [21:0]   address;
wire            reset           = 1'b0;

wire            write_command;
wire            read_command;
wire            write_finished;
wire            read_finished;
wire  [127:0]   write_data;
wire  [127:0]   read_data;

reg             write_request;
reg             read_request;

localparam SIZE = 65536;
(* ram_init_file = "program.mif" *) reg [15:0] rom [SIZE-1:0];

reg   [15:0] pc = 0;
reg   [15:0] addr = 0;
reg   [15:0] data_write_reg = 0;
reg   [15:0] data_read_reg = 0;

//=======================================================
//  Structural coding
//=======================================================
assign  write_data      = {112'b0, data_write_reg};
assign  HEX0            = data_write_reg[8:0];

assign  address         = {6'b0,addr};

always @(posedge MAX10_CLK1_50)
begin
    state <= #1 next_state;
end

always @(state or read_finished or write_finished)
begin
  case (state)
  0:
  begin
	 next_state <= 1;
  end
  1:
  begin
	 if(write_finished)
	   next_state <= 0;
	 else
	   next_state <= 1;
  end
  endcase  
end

always @(state)
begin
  case(state)
  0:
  begin
	 addr <= pc;
	 data_write_reg <= rom[pc];
	 write_request <= 1;
	 read_request <= 0;
	 pc <= pc + 1;
  end
  1:
  begin
	 write_request <= 0;
	 read_request <= 0;
  end
  endcase
end


sdram_controller sdram_controller(
	 .iclk(MAX10_CLK1_50),
    .ireset(reset),
    
    .iwrite_req(write_request),
    .iwrite_address(address),
    .iwrite_data(write_data),
    .owrite_ack(write_finished),
    
    .iread_req(read_request),
    .iread_address(address),
    .oread_data(read_data),
    .oread_ack(read_finished),
    
	 //////////// SDRAM //////////
	 .DRAM_ADDR(DRAM_ADDR),
    .DRAM_BA(DRAM_BA),
    .DRAM_CAS_N(DRAM_CAS_N),
    .DRAM_CKE(DRAM_CKE),
    .DRAM_CLK(DRAM_CLK),
    .DRAM_CS_N(DRAM_CS_N),
    .DRAM_DQ(DRAM_DQ),
    .DRAM_LDQM(DRAM_LDQM),
    .DRAM_RAS_N(DRAM_RAS_N),
    .DRAM_UDQM(DRAM_UDQM),
    .DRAM_WE_N(DRAM_WE_N)
);

endmodule
